org: jdcpham
app: john-pham-api
service: movies
frameworkVersion: '3'
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'development'}
  memorySize: 512
  timeout: 30
  region: eu-west-1
  apiGateway:
    restApiId:
      'Fn::ImportValue': John-Pham-API-Gateway-Rest-ID-${self:custom.environments.capital.${self:provider.stage}}
    restApiRootResourceId:
      'Fn::ImportValue': John-Pham-API-Gateway-Root-Resource-ID-${self:custom.environments.capital.${self:provider.stage}}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "secretsmanager:GetSecretValue"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - s3:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - ses:SendTemplatedEmail
      Resource: "*"
    - Effect: "Allow"
      Action:
        - s3:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - logs:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - ses:SendTemplatedEmail
      Resource: "*"

functions:
  add_watched:
    handler: handlers.watched.post
    events:
      - http:
          path: /movie/watched
          method: POST
          cors: true
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      STAGE: ${self:provider.stage}
  recently_watched:
    handler: handlers.watched.get
    events:
      - schedule: ${self:custom.frequent_update_schedule.${self:provider.stage}} 
      - http:
          path: /movies/watched
          method: GET
          cors: true
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      STAGE: ${self:provider.stage}
  search:
    handler: handlers.search.get
    events:
      - http:
          path: /movies/search
          method: GET
          cors: true
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      STAGE: ${self:provider.stage}

package:
  exclude:
    - "**"
  include:
    - "./handlers/**"
    - "./utils/**"

plugins: 
  - serverless-python-requirements
  - serverless-offline

custom:
  environments:
    upper:
      development: DEVELOPMENT
      staging: STAGING
      production: PRODUCTION
    capital:
      development: Development
      staging: Staging
      production: Production
  frequent_update_schedule:
    development: rate(1 hour)
    staging: rate(1 day)
    production: rate(5 minutes)
  daily_update_schedule:
    development: rate(7 days)
    staging: rate(7 days)
    production: rate(1 day)
  pythonRequirements:
    pythonBin: python
    dockerizePip: non-linux
    slim: true
    layer:
      name: ${self:service}-python-requirements
      description: Python Requirements Lambda Layer
      compatibleRuntimes:
        - python3.11
      licenseInfo: GPLv3
      allowedAccounts:
        - '*'